{
	"info": {
		"_postman_id": "a551b3af-5e82-4e92-b709-d797ba7da6fb",
		"name": "Employees",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36767069"
	},
	"item": [
		{
			"name": "All_Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array in the response should exist and be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that each 'data' object has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.data.forEach(function(employee) {\r",
							"        pm.expect(employee).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(employee).to.have.property('employee_name').that.is.a('string');\r",
							"        pm.expect(employee).to.have.property('employee_salary').that.is.a('number');\r",
							"        pm.expect(employee).to.have.property('employee_age').that.is.a('number');\r",
							"        pm.expect(employee).to.have.property('profile_image').that.is.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/employees",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Employee_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"\r",
							"    const requiredFields = ['id', 'employee_name', 'employee_salary', 'employee_age', 'profile_image'];\r",
							"    requiredFields.forEach(function(field) {\r",
							"        pm.expect(responseData.data).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Employee salary is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data.employee_salary).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Employee age is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.employee_age).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/employee/5",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - name, salary, age, and id\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data').that.has.all.keys('name', 'salary', 'age', 'id');\r",
							"});\r",
							"\r",
							"pm.test(\"Name, salary, and age are in the expected data types\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"    pm.expect(responseData.salary).to.be.a('string');\r",
							"    pm.expect(responseData.age).to.be.a('string'); // Fixed the expected data type for age\r",
							"});\r",
							"\r",
							"pm.test(\"Message is present and is a non-empty string\", function () {\r",
							"    const message = pm.response.text();\r",
							"    pm.expect(message).to.include(\"\"); // Updated the expected message value\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"joseph\",\"salary\":\"100000\",\"age\":\"56\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/create",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - status, data, and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name field in the data object is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"David\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/update/8",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"update",
						"8"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response schema for expected fields and data types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"    pm.expect(responseData.data).to.be.an('string');\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/delete/3",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"delete",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/employee/8",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"8"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the details of an employee with the specified ID. However, the response may include a deleted employee record despite the record being deleted. The response will have a status code of 200 and a content type of application/json. The response body will contain an empty \"status\" field, and a \"data\" object with the ID, name, salary, age, and profile image of the employee. The \"message\" field in the response will also be empty."
			},
			"response": []
		}
	]
}